/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sandpile;

import Lattices.CylinderLattice;
import Lattices.hexLattice;
import Lattices.rectLattice;
import Lattices.rectTorus;
import Lattices.sandpileLattice;
import java.awt.Color;
import java.awt.Container;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JScrollPane;

/**
 *
 * @author Edward Newkirk
 */
public class SandpileControlPanel extends javax.swing.JFrame {
    Color neg, zero, one, two, three, four, five, six, ready, centerColor;
    sandpileLattice currentPile, tempPile;
    int i, j, height, width, size;
    JFrame frame;
    JScrollPane jsp;
    String type;
    Set<node> nodesToCheck, nextNodesToCheck;
    stabilizationThread currentStabThread;
    identityThread currentIdentityThread;
    idPrepThread currentPrepThread;
    boolean stabilizationRunning, stabilizationDone;

    /**
     * Creates new form SandpileControlPanel
     */
    public SandpileControlPanel() {
        initComponents();
        neg = Color.CYAN;
        zero = Color.WHITE;
        one = Color.LIGHT_GRAY;
        two = Color.YELLOW;
        three = Color.ORANGE;
        four = Color.PINK;
        five = Color.MAGENTA;
        ready = Color.RED;
        centerColor = Color.BLACK;
        stabilizationRunning = true;
        stabilizationDone = false;
        height = 0;
        width = 0;
        size = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TypeSelectorGroup = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jSpinner2 = new javax.swing.JSpinner();
        jSpinner4 = new javax.swing.JSpinner();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        jMenu1 = new javax.swing.JMenu();
        Width = new javax.swing.JSpinner();
        Height = new javax.swing.JSpinner();
        Size = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        newGrid = new javax.swing.JButton();
        Depth = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        addCenter = new javax.swing.JButton();
        fireButton = new javax.swing.JButton();
        chipsToAdd = new javax.swing.JSpinner();
        resizeButton = new javax.swing.JButton();
        stabilizeButton = new javax.swing.JButton();
        rectangleRadio = new javax.swing.JRadioButton();
        hexRadio = new javax.swing.JRadioButton();
        identityButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        totalChips = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        chipsTable = new javax.swing.JTextField();
        jpeg = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        unstableNodes = new javax.swing.JTextField();
        roundsCount = new javax.swing.JTextField();
        squareTorus = new javax.swing.JRadioButton();
        cylinderRadio = new javax.swing.JRadioButton();
        displayToggle = new javax.swing.JToggleButton();
        displaySelector = new javax.swing.JComboBox();

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("jRadioButtonMenuItem1");

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sandpile Controls");

        Width.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(15), Integer.valueOf(3), null, Integer.valueOf(2)));

        Height.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(15), Integer.valueOf(3), null, Integer.valueOf(2)));

        Size.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(5), Integer.valueOf(1), null, Integer.valueOf(1)));

        jLabel1.setText("Width");

        jLabel2.setText("Height");

        jLabel3.setText("Node Size");

        jLabel4.setText("Grid Type");

        newGrid.setText("Build New Sandpile");
        newGrid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGridActionPerformed(evt);
            }
        });

        Depth.setModel(new javax.swing.SpinnerNumberModel());

        jLabel5.setText("Starting Depth");

        addCenter.setText("Add Chips To Center");
        addCenter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCenterActionPerformed(evt);
            }
        });

        fireButton.setText("Fire Once");
        fireButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fireButtonActionPerformed(evt);
            }
        });

        chipsToAdd.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1000), Integer.valueOf(1), null, Integer.valueOf(1)));

        resizeButton.setText("Resize Nodes");
        resizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resizeButtonActionPerformed(evt);
            }
        });

        stabilizeButton.setText("Stabilize");
        stabilizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stabilizeButtonActionPerformed(evt);
            }
        });

        TypeSelectorGroup.add(rectangleRadio);
        rectangleRadio.setSelected(true);
        rectangleRadio.setText("Rectangle");

        TypeSelectorGroup.add(hexRadio);
        hexRadio.setText("Hex");

        identityButton.setText("Display Identity Element");
        identityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                identityButtonActionPerformed(evt);
            }
        });

        totalChips.setText("0");
        totalChips.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalChipsActionPerformed(evt);
            }
        });

        jLabel6.setText("Chips Placed:");

        jLabel7.setText("Chips On Table:");

        chipsTable.setText("0");
        chipsTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chipsTableActionPerformed(evt);
            }
        });

        jpeg.setText("Save As JPEG");
        jpeg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jpegActionPerformed(evt);
            }
        });

        jLabel8.setText("Increased Nodes:");

        jLabel9.setText("Rounds Processed:");

        unstableNodes.setText("0");

        roundsCount.setText("0");

        TypeSelectorGroup.add(squareTorus);
        squareTorus.setText("Rectangular Torus");
        squareTorus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                squareTorusActionPerformed(evt);
            }
        });

        TypeSelectorGroup.add(cylinderRadio);
        cylinderRadio.setText("Cylinder");

        displayToggle.setText("Toggle Display Mode");
        displayToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayToggleActionPerformed(evt);
            }
        });

        displaySelector.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Number Of Chips", "Time Since Firing", "Number Of Firings" }));
        displaySelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displaySelectorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(chipsToAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addCenter))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(Height, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                                                    .addComponent(Width)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel5)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(Size, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(Depth, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGap(40, 40, 40)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addComponent(rectangleRadio)
                                            .addComponent(hexRadio)
                                            .addComponent(squareTorus)
                                            .addComponent(cylinderRadio))
                                        .addGap(28, 28, 28)))
                                .addGap(24, 24, 24))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jpeg)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(displayToggle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(resizeButton)
                                .addGap(3, 3, 3))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chipsTable, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(fireButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(stabilizeButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(18, 18, 18)
                                        .addComponent(totalChips, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel9)
                                            .addComponent(jLabel8))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(roundsCount, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                                            .addComponent(unstableNodes))))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(identityButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(newGrid)
                                .addGap(23, 23, 23)))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(displaySelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Width, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(rectangleRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Height, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(hexRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Size, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(squareTorus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Depth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(cylinderRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(identityButton)
                    .addComponent(newGrid))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(displaySelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resizeButton)
                    .addComponent(jpeg)
                    .addComponent(displayToggle))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chipsToAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addCenter))
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(totalChips, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stabilizeButton)
                    .addComponent(fireButton)
                    .addComponent(jLabel7)
                    .addComponent(chipsTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(unstableNodes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(roundsCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newGridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGridActionPerformed
         height = Integer.parseInt(Height.getValue().toString());
         width = Integer.parseInt(Width.getValue().toString());
         size = Integer.parseInt(Size.getValue().toString());
        int depth = Integer.parseInt(Depth.getValue().toString());
        if(rectangleRadio.isSelected()){
            type = "rectangle";
            currentPile = new rectLattice(height, width, depth, size);
            currentPile.setColors(neg, zero, one, two, three, four, five, ready, centerColor);
        }
         else if(hexRadio.isSelected()){
            type = "hex";
            if(width % 2 == 0){
                width++;
            }
            if(height % 2 == 0){
                height++;
            }
            currentPile = new hexLattice(height, width, depth, size);
            currentPile.setColors(neg, zero, one, two, three, four, five, ready, centerColor);
        }
        else if (squareTorus.isSelected()){
            type = "rectTorus";
            currentPile = new rectTorus(height, width, depth, size);
            currentPile.setColors(neg, zero, one, two, three, four, five, ready, centerColor);
        }
        else if (cylinderRadio.isSelected()){
            type = "cylinder";
            currentPile = new CylinderLattice(height, width, depth, size);
            currentPile.setColors(neg, zero, one, two, three, four, five, ready, centerColor);
        }
        if(frame == null){
            frame = new JFrame("Sandpile");
        }        
        jsp = new JScrollPane(currentPile);
        Container c = frame.getContentPane();
        c.add(jsp);
        frame.setContentPane(jsp);
        frame.setBounds(500,0,size*width + 50, size*height + 50);
        frame.setSize(size*width+50,size*height+50);
        frame.setVisible(true);
        setDisplayType();
        totalChips.setText(""+currentPile.totalChips());
        chipsTable.setText(""+currentPile.totalChipsMinusSink());       
    }//GEN-LAST:event_newGridActionPerformed

    private void fireButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fireButtonActionPerformed
        nodesToCheck = currentPile.fireAll();
        currentPile.repaint();
    }//GEN-LAST:event_fireButtonActionPerformed

    private void addCenterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCenterActionPerformed
        currentPile.addChipsAtCenter(Integer.parseInt(chipsToAdd.getValue().toString()));
    }//GEN-LAST:event_addCenterActionPerformed

    private void resizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resizeButtonActionPerformed
        size = Integer.parseInt(Size.getValue().toString());
        currentPile.setSquareSize(size);
        currentPile.repaint();
        jsp.setSize(size*width,size*height);
    }//GEN-LAST:event_resizeButtonActionPerformed

    private void stabilizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stabilizeButtonActionPerformed
        stabilizeSandpile(currentPile);
    }//GEN-LAST:event_stabilizeButtonActionPerformed

    public sandpileLattice newZeroLattice(){
        sandpileLattice newLattice = null;
         height = Integer.parseInt(Height.getValue().toString());
         width = Integer.parseInt(Width.getValue().toString());
         size = Integer.parseInt(Size.getValue().toString());
        if(rectangleRadio.isSelected()){
            type = "rectangle";
            newLattice = new rectLattice(height, width, 0, size);
            newLattice.setColors(neg, zero, one, two, three, four, five, ready, centerColor);
        }
         else if(hexRadio.isSelected()){
            type = "hex";
            if(width % 2 == 0){
                width++;
            }
            if(height % 2 == 0){
                height++;
            }
            newLattice = new hexLattice(height, width, 0, size);
            newLattice.setColors(neg, zero, one, two, three, four, five, ready, centerColor);
        }
        else if (squareTorus.isSelected()){
            type = "rectTorus";
            newLattice = new rectTorus(height, width, 0, size);
            newLattice.setColors(neg, zero, one, two, three, four, five, ready, centerColor);
        }
        else if (cylinderRadio.isSelected()){
            type = "cylinder";
            newLattice = new CylinderLattice(height, width, 0, size);
            newLattice.setColors(neg, zero, one, two, three, four, five, ready, centerColor);
        }
        return newLattice;
    }
    private void identityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_identityButtonActionPerformed
        // TODO add your handling code here:
        currentPile = newZeroLattice();
        if(frame == null){
            frame = new JFrame("Sandpile");
        }
        jsp = new JScrollPane(currentPile);
        Container c = frame.getContentPane();
        c.add(jsp);
        frame.setContentPane(jsp);
        frame.setBounds(500,0,size*width + 50, size*height + 50);
        frame.setSize(size*width+50,size*height+50);
        frame.setVisible(true);
        currentIdentityThread = new identityThread();
        currentIdentityThread.start();
    }//GEN-LAST:event_identityButtonActionPerformed

    private void totalChipsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalChipsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalChipsActionPerformed

    private void chipsTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chipsTableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chipsTableActionPerformed

    private void jpegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jpegActionPerformed
        BufferedImage bi;
        Graphics2D h;
        String title;
        File target;
        bi = new BufferedImage(currentPile.getGridWidth()*size,currentPile.getGridHeight()*size,BufferedImage.TYPE_INT_RGB);
        h = bi.createGraphics();
        currentPile.paint(h);
        title = type + "W"+currentPile.getGridWidth()+"H"+currentPile.getGridHeight()+"Chips"+currentPile.totalChips()+"Table"+currentPile.totalChipsMinusSink();
        target = new File(title+".jpg");
        try{ImageIO.write(bi,"jpg", target);}catch (Exception e) {}               
    }//GEN-LAST:event_jpegActionPerformed

    private void squareTorusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_squareTorusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_squareTorusActionPerformed

    private void displayToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayToggleActionPerformed
        if(!(currentPile == null)){
            if(currentPile.getTotalFirings()==0){
                nodesToCheck = currentPile.fireAll();
            }
            currentPile.setDisplayMode(displayToggle.isSelected());
            currentPile.repaint();
        }
    }//GEN-LAST:event_displayToggleActionPerformed

    private void displaySelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displaySelectorActionPerformed
        if(!(currentPile == null)){
            setDisplayType();
            currentPile.repaint();
        }
    }//GEN-LAST:event_displaySelectorActionPerformed

    public void stabilizeSandpile(sandpileLattice pile){
        System.out.println("Started Stabilizing, Total Chips: " + currentPile.totalChips());
        currentStabThread = new stabilizationThread();
        currentStabThread.unstablePile = pile;
        stabilizationDone = false;
        currentStabThread.start();
    }
    
    public void updateData(int chipsTotal, int chipsOnTable, int tallNodes, int roundsProcessed){
        totalChips.setText(""+chipsTotal);
        chipsTable.setText(""+chipsOnTable);
        unstableNodes.setText(""+ tallNodes);
        roundsCount.setText(""+ roundsProcessed);
    }
    
    public void setDisplayType(){
        String displayType = (String) displaySelector.getSelectedItem();
        switch(displayType){
            case("Number Of Chips"):
                currentPile.displayChips();
                break;
            case("Time Since Firing"):
                currentPile.displayTime();
                break;
            case("Number Of Firings"):
                currentPile.displayFirings();
                break;
        }
        System.out.println("Display Type: " + currentPile.displayType());
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SandpileControlPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new SandpileControlPanel().setVisible(true);
            }
        });
    }
    
    private class stabilizationThread extends Thread{
        sandpileLattice unstablePile;
        @Override
        public void run(){
            stabilizationRunning = true;
            nodesToCheck = unstablePile.fireAll();
            while(!stabilizationDone){
                while(stabilizationRunning){
                    while(nodesToCheck.size()>0){
                        nextNodesToCheck = unstablePile.fireFromSet(nodesToCheck);
                        nodesToCheck = nextNodesToCheck;
                        unstablePile.repaint();
                        updateData(unstablePile.totalChips(),unstablePile.totalChipsMinusSink(),nextNodesToCheck.size(),unstablePile.getTotalFirings());
                    }
                    System.out.println("Finished Stabilizing");
                    stabilizationDone = true;
                    stabilizationRunning = false;
                }
            }
        }
    }
    
    private class identityThread extends Thread{
        @Override
        public void run(){
            currentPrepThread = new idPrepThread();
            currentPrepThread.toPrep = currentPile;
            setDisplayType();
            currentPrepThread.start();
            try {
                currentPrepThread.join();
            } catch (InterruptedException ex) {
                Logger.getLogger(SandpileControlPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            totalChips.setText(""+currentPile.totalChips());
            chipsTable.setText(""+currentPile.totalChipsMinusSink());
            stabilizeSandpile(currentPile);
            try {
                currentStabThread.join();
            } catch (InterruptedException ex) {
                Logger.getLogger(SandpileControlPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
           
            tempPile = newZeroLattice();
            currentPrepThread = new idPrepThread();
            currentPrepThread.toPrep = tempPile;
            currentPrepThread.start();
            try {
                currentPrepThread.join();
            } catch (InterruptedException ex) {
                Logger.getLogger(SandpileControlPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            tempPile.subtractArray(currentPile);
            currentPile = tempPile;
            jsp = new JScrollPane(currentPile);
            Container c = frame.getContentPane();
            c.add(jsp);
            frame.setContentPane(jsp);
            frame.setBounds(500,0,size*width + 50, size*height + 50);
            frame.setSize(size*width+50,size*height+50);
            frame.setVisible(true);
            setDisplayType();
            stabilizeSandpile(currentPile);
            
        }
    }
    
    private class idPrepThread extends Thread{
        public sandpileLattice toPrep;
        @Override
        public void run(){
            toPrep.prepareForIdentity();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner Depth;
    private javax.swing.JSpinner Height;
    private javax.swing.JSpinner Size;
    private javax.swing.ButtonGroup TypeSelectorGroup;
    private javax.swing.JSpinner Width;
    private javax.swing.JButton addCenter;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JTextField chipsTable;
    private javax.swing.JSpinner chipsToAdd;
    private javax.swing.JRadioButton cylinderRadio;
    private javax.swing.JComboBox displaySelector;
    private javax.swing.JToggleButton displayToggle;
    private javax.swing.JButton fireButton;
    private javax.swing.JRadioButton hexRadio;
    private javax.swing.JButton identityButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JSpinner jSpinner4;
    private javax.swing.JButton jpeg;
    private javax.swing.JButton newGrid;
    private javax.swing.JRadioButton rectangleRadio;
    private javax.swing.JButton resizeButton;
    private javax.swing.JTextField roundsCount;
    private javax.swing.JRadioButton squareTorus;
    private javax.swing.JButton stabilizeButton;
    private javax.swing.JTextField totalChips;
    private javax.swing.JTextField unstableNodes;
    // End of variables declaration//GEN-END:variables
}
